I need to implement class AWS Processor -> this will support key wrapping. and data encryption and decryption.
Need to change the keyVault to include the option of parent key (key that is used to encrypt it) also to randomly genrate a key which will be wrapping all the key ( the key wrapping also changes so need to create a file that will have the different imoplementation of the key wrapping algo)
Need to implement class Google Cloud Processor -> this will support the 3 kinds of key wrapping, and data encryption and decryption
Need to create class AWS , Google Cloud which will ultimately have all the operations (key versioning all more)
Need to create a server for Aws and Google Cloud
Now for Azure we just need to use the KeyVault that we have and make a cpp server that will lock and unlock the vms
#include <cstdlib>

int main() {
    // Unlock
    system("cryptsetup luksOpen /dev/sdb1 my_encrypted_disk --key-file /root/key.bin");
    
    // Do operations (mount, copy files, etc.)
    
    // Lock
    system("cryptsetup luksClose my_encrypted_disk");
    
    return 0;
}

Now we need to make clients of all the above cloud

then we are done 



AccessController -> control access by (need initialisation including password and access control list) (currently the password and username is same)
Key Vault -> genrerate the master Key (random bits) (let us fix the master key for symmetric AES)
BaseCryptoProcessor -> encrypt using AES keys and updating the parent feild in the metadata. for all the 3 type of encryption.
AWSHSM -> directly from the BaseCryptoProcessor , include provisoions of creating the heirarchy and storing is locally. Also the functionalities that it will give encrypted and and decrypted key
AWSServer -> server interfact to conected to the server
--

GoogleCloud ->  creating the heirarchy and versioning. encrypting data.
GoogleCloud -> server interface to do it.

--
Azure
